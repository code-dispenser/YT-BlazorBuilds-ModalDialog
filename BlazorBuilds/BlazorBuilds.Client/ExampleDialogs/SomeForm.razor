@inject ModalDialogService _dialogService

<div class="dialog" @onkeydown="HandleKeyDown"><!-- Important add a key down handler for the escape key -->
    <div class="dialog__header dialog__header--success">
        <span class="dialog__icon dialog__icon--success pencil-icon" aria-hidden="true"></span>
        <h3 id="@_dialogTitleID">Some Form</h3>
    </div>
    <div class="dialog__body">
        <p>Your form fields in here.</p>
        <p>The object passed in: @(SomePersonData is null ? "[Null]" : SomePersonData)</p>
        <p>
            <label for="checkboxSave">Check to complete form:</label>
            <input id="checkboxSave" type="checkbox" @bind="_isDirty" />
        </p>
        <p>The confirmation dialog is set to open bottom right</p>
    </div>

    <div class="dialog__footer">
        <button class="button button--success" @onclick="async () => await HandleSaveChanges()"
        aria-disabled="@((!_isDirty).ToString().ToLower())" type="button">
            Save Changes
        </button>
        <button @ref="ButtonCancelRef" class="button button--warning" @onclick="async () => await HandleCancelRequest(_isDirty,_dialogService,ButtonCancelRef)" type="button">Cancel</button>
    </div>
</div>
@code {
    [Parameter] public SomePersonData SomePersonData { get; set; } = default!;

    private ElementReference ButtonCancelRef { get; set; }
    private string _dialogTitleID = Guid.Empty.ToString();
    private bool   _isDirty       = false;

    protected override void OnInitialized()

        => _dialogTitleID = _dialogService is null ? _dialogTitleID : _dialogService.GetAriaLabelledByID();

    public async Task HandleSaveChanges()
    {
        var returnData = new SomePersonView(SomePersonData.FirstName + " " + SomePersonData.Surname, "Jane " + SomePersonData.Surname);
        await _dialogService.CloseDialog(ModalDialogResult.OK(returnData));
    }

    public async Task HandleKeyDown(KeyboardEventArgs keyArgs)

        => await (keyArgs.Key == GlobalValues.KeyBoard_Escape_Key).WhenTrue(() => HandleCancelRequest(_isDirty, _dialogService, ButtonCancelRef));

    public async Task HandleCancelRequest(bool isDirty, ModalDialogService dialogService, ElementReference? elementToFocus)
    {
        if (false == isDirty)
        {
            await dialogService.CloseDialog(ModalDialogResult.Cancel());
            return;
        }

        var dialogParameters = new ModalDialogParameters<ConfirmationDialog>();
        var dialogOptions    = new ModalDialogOptions(HorizontalAlignment.Right, VerticalAlignment.Bottom, maxWidthPercent:50);

        dialogParameters.Add<string>(s=> s.DialogMessage, GlobalValues.Confirmation_UnSaved_Changes_Message);

        var closeDialog = await dialogService.ShowDialog<ConfirmationDialog>(dialogParameters, dialogOptions);

        if (closeDialog.ButtonClicked == DialogResultButtons.Ok)
        {
            await dialogService.CloseDialog(ModalDialogResult.Cancel());
            return;
        }

        await Task.Yield();
        await (elementToFocus.HasValue).WhenTrue(() => elementToFocus!.Value.FocusAsync());
    }
}
